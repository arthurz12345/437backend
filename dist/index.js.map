{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import express, { Request, Response } from \"express\";\nimport cors from \"cors\";\nimport { connect } from \"./mongoConnect\";\n\nimport userService from \"./services/user-service\";\nimport { User } from \"./models/user\";\nimport apiRouter from \"./routes/api\";\n\n\nconst app = express();\nconst port = process.env.PORT || 3000;\napp.use(cors());\napp.use(express.json());\nconnect(\"clusteremu\"); \n\n\napp.get(\"/hello\", (req: Request, res: Response) => {\n    res.send(\"Hello, World\");\n});\n\n// sign up\napp.post(\"/api/signup\", (req: Request, res: Response) => {\n    const newUser = req.body; // from form\n    console.log(req.body)\n    if (!newUser.username || !newUser.password) {\n      res.status(400).send(\"Bad request: Invalid input data.\");\n    } else {\n      userService.createUser(newUser)\n        .then((createdNewUser) => userService.generateAccessToken(createdNewUser.username))\n        .then((token) => {\n          res.status(201).send({ token: token });\n        })\n      .catch(err=>res.status(500).send(err));\n    }\n  });\n\n// create new user, it's part of sign up\napp.post(\"/api/users\", (req: Request, res: Response) => {\n    const newUser = req.body;\n    userService\n    .createUser(newUser)\n    .then((user: User) => {\n        console.log(\"Create user successful\");\n        res.status(201).send(user);\n    })\n    .catch((err) => res.status(500).send(err));\n});\n   \n\n// login\napp.post(\"/api/login\", (req: Request, res: Response) => {\n    const { username, password } = req.body; // from form\n  \n    userService\n    .loginUser(username, password)\n    .then((token) => res.status(200).send({ token: token }))\n    .catch((error) => res.status(401).send(\"Unauthorized\"));\n\n});\n\napp.use(\"/api\", apiRouter);\n\n// //update existing user, moved to user-route\n// app.put(\"/api/users/:username\", (req: Request, res: Response) => {\n//     const { username } = req.params;\n//     const newUser = req.body;\n//     userService\n//     .update(username, newUser)\n//     .then((user: User) => res.json(user))\n//     .catch((err) => res.status(404).end());\n// });\n\n\n// // get user by username, moved to user-route\n// app.get(\"/api/users/:username\", (req: Request, res: Response) => {\n//     const { username } = req.params;\n//     userService\n//     .get(username)\n//     .then((user: User) => res.json(user))\n//     .catch((err) => res.status(404).end());\n// });\n\n\napp.get(\"/logout\", (req, res) => {});\n\napp.get(\"/api/users\", (req, res) => {});\n\napp.get(\"/api/notes/:username\", (req, res) => {});\n\n\napp.get(\"/favorite\", (req, res) => {});\n\napp.post(\"api/note\", (req, res) => {});\n\n\n\napp.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}`);\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,qBAA2C;AAC3C,kBAAiB;AACjB,0BAAwB;AAExB,0BAAwB;AAExB,iBAAsB;AAGtB,MAAM,UAAM,eAAAA,SAAQ;AACpB,MAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,IAAI,QAAI,YAAAC,SAAK,CAAC;AACd,IAAI,IAAI,eAAAD,QAAQ,KAAK,CAAC;AAAA,IACtB,6BAAQ,YAAY;AAGpB,IAAI,IAAI,UAAU,CAAC,KAAc,QAAkB;AAC/C,MAAI,KAAK,cAAc;AAC3B,CAAC;AAGD,IAAI,KAAK,eAAe,CAAC,KAAc,QAAkB;AACrD,QAAM,UAAU,IAAI;AACpB,UAAQ,IAAI,IAAI,IAAI;AACpB,MAAI,CAAC,QAAQ,YAAY,CAAC,QAAQ,UAAU;AAC1C,QAAI,OAAO,GAAG,EAAE,KAAK,kCAAkC;AAAA,EACzD,OAAO;AACL,wBAAAE,QAAY,WAAW,OAAO,EAC3B,KAAK,CAAC,mBAAmB,oBAAAA,QAAY,oBAAoB,eAAe,QAAQ,CAAC,EACjF,KAAK,CAAC,UAAU;AACf,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,MAAa,CAAC;AAAA,IACvC,CAAC,EACF,MAAM,SAAK,IAAI,OAAO,GAAG,EAAE,KAAK,GAAG,CAAC;AAAA,EACvC;AACF,CAAC;AAGH,IAAI,KAAK,cAAc,CAAC,KAAc,QAAkB;AACpD,QAAM,UAAU,IAAI;AACpB,sBAAAA,QACC,WAAW,OAAO,EAClB,KAAK,CAAC,SAAe;AAClB,YAAQ,IAAI,wBAAwB;AACpC,QAAI,OAAO,GAAG,EAAE,KAAK,IAAI;AAAA,EAC7B,CAAC,EACA,MAAM,CAAC,QAAQ,IAAI,OAAO,GAAG,EAAE,KAAK,GAAG,CAAC;AAC7C,CAAC;AAID,IAAI,KAAK,cAAc,CAAC,KAAc,QAAkB;AACpD,QAAM,EAAE,UAAU,SAAS,IAAI,IAAI;AAEnC,sBAAAA,QACC,UAAU,UAAU,QAAQ,EAC5B,KAAK,CAAC,UAAU,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,MAAa,CAAC,CAAC,EACtD,MAAM,CAAC,UAAU,IAAI,OAAO,GAAG,EAAE,KAAK,cAAc,CAAC;AAE1D,CAAC;AAED,IAAI,IAAI,QAAQ,WAAAC,OAAS;AAuBzB,IAAI,IAAI,WAAW,CAAC,KAAK,QAAQ;AAAC,CAAC;AAEnC,IAAI,IAAI,cAAc,CAAC,KAAK,QAAQ;AAAC,CAAC;AAEtC,IAAI,IAAI,wBAAwB,CAAC,KAAK,QAAQ;AAAC,CAAC;AAGhD,IAAI,IAAI,aAAa,CAAC,KAAK,QAAQ;AAAC,CAAC;AAErC,IAAI,KAAK,YAAY,CAAC,KAAK,QAAQ;AAAC,CAAC;AAIrC,IAAI,OAAO,MAAM,MAAM;AACnB,UAAQ,IAAI,sCAAsC,IAAI,EAAE;AAC5D,CAAC;",
  "names": ["express", "cors", "userService", "apiRouter"]
}
